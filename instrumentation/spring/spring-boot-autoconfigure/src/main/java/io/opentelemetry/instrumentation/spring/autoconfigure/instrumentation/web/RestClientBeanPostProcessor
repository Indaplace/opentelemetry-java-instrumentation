import io.opentelemetry.api.OpenTelemetry;
import io.opentelemetry.instrumentation.spring.web.v3_1.SpringWebTelemetry;
import org.springframework.beans.factory.ObjectProvider;
import org.springframework.beans.factory.config.BeanPostProcessor;
import org.springframework.http.client.ClientHttpRequestInterceptor;
import org.springframework.web.client.RestClient;

public final class RestClientBeanPostProcessor implements BeanPostProcessor {

    private final ObjectProvider<OpenTelemetry> openTelemetryProvider;

    public RestClientBeanPostProcessor(ObjectProvider<OpenTelemetry> openTelemetryProvider) {
        this.openTelemetryProvider = openTelemetryProvider;
    }

    @Override
    public Object postProcessAfterInitialization(Object bean, String beanName) {
        if (!(bean instanceof RestClient restClient)) {
            return bean;
        }
        ClientHttpRequestInterceptor interceptor = SpringWebTelemetry.create(openTelemetryProvider.getObject()).newInterceptor();
        return addRestClientInterceptorIfNotPresent(restClient, interceptor);
    }

    private static RestClient addRestClientInterceptorIfNotPresent(RestClient restClient, ClientHttpRequestInterceptor instrumentationInterceptor) {
        return restClient.mutate().requestInterceptors(interceptors -> {
            if (interceptors.stream().noneMatch(interceptor -> interceptor.getClass() == instrumentationInterceptor.getClass())) {
                interceptors.addFirst(instrumentationInterceptor);
            }
        }).build();
    }
}
